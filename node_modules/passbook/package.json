{
  "name": "passbook",
  "description": "iOS Passbook for the Node hacker",
  "homepage": "https://github.com/assaf/node-passbook",
  "version": "2.0.2",
  "author": {
    "name": "Assaf Arkin",
    "email": "assaf@labnotes.org"
  },
  "main": "./lib/index.js",
  "bin": {
    "node-passbook": "./bin/node-passbook"
  },
  "dependencies": {
    "async": "0.2.9",
    "cli": "0.4.5"
  },
  "devDependencies": {
    "mocha": "1.12.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "iOS",
    "apple",
    "passbook",
    "library"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/assaf/node-passbook"
  },
  "bugs": {
    "url": "http://github.com/assaf/node-passbook/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/assaf/node-passbook/blob/master/MIT-LICENSE"
    }
  ],
  "readme": "# Get your certificates\n\nTo start with, you'll need a certificate issued by [the iOS Provisioning\nPortal](https://developer.apple.com/ios/manage/passtypeids/index.action).  You\nneed one certificate per Passbook Type ID.\n\nAfter adding this certificate to your Keychain, you need to export it as a\n`.p12` file and copy it into the keys directory.\n\nYou will also need the 'Apple Worldwide Developer Relations Certification\nAuthority' certificate and to conver the `.p12` files into `.pem` files.  You\ncan do both using the `node-passbook prepare-keys` command:\n\n```\nnode-passbook prepare-keys -p keys\n```\n\nThis is the same directory into which you placet the `.p12` files.\n\n\n# Start with a template\n\nStart with a template.  A template has all the common data fields that will be\nshared between your passes, and also defines the keys to use for signing it.\n\n```\nvar createTemplate = require(\"passbook\");\n\nvar template = createTemplate(\"coupon\", {\n  passTypeIdentifier: \"pass.com.example.passbook\",\n  teamIdentifier:     \"MXL\",\n  backgroundColor:   \"rgb(255,255,255)\"\n});\n```\n\nThe first argument is the pass style (`coupon`, `eventTicket`, etc), and the\nsecond optional argument has any fields you want to set on the template.\n\nYou can access template fields directly, or from chained accessor methods, e.g:\n\n```\ntemplate.fields.passTypeIdentifier = \"pass.com.example.passbook\";\n\nconsole.log(template.passTypeIdentifier());\n\ntemplate.teamIdentifier(\"MXL\").\n  passTypeIdentifier(\"pass.com.example.passbook\")\n```\n\nThe following template fields are required:\n`passTypeIdentifier`  - The Passbook Type ID, begins with \"pass.\"\n`teamIdentifier`      - May contain an I\n\nOptional fields that you can set on the template (or pass): `backgroundColor`,\n`foregroundColor`, `labelColor`, `logoText`, `organizationName`,\n`suppressStripShine` and `webServiceURL`.\n\nIn addition, you need to tell the template where to find the key files and where\nto load images from:\n\n```\ntemplate.keys(\"/etc/passbook/keys\", \"secret\");\ntemplate.loadImagesFrom(\"images\");\n```\n\nThe last part is optional, but if you have images that are common to all passes,\nyou may want to specify them once in the template.\n\n\n# Create your pass\n\nTo create a new pass from a template:\n\n```\nvar pass = template.createPass({\n  serialNumber:  \"123456\",\n  description:   \"20% off\"\n});\n```\n\nJust like template, you can access pass fields directly, or from chained\naccessor methods, e.g:\n\n```\npass.fields.serialNumber = \"12345\";\nconsole.log(pass.serialNumber());\npass.serialNumber(\"12345\").\n  description(\"20% off\");\n```\n\nIn the JSON specification, structure fields (primary fields, secondary fields,\netc) are represented as arrays, but items must have distinct key properties.  Le\nsigh.\n\nTo make it easier, you can use methods like `add`, `get` and `remove` that\nwill do the logical thing.  For example, to add a primary field:\n\n```\npass.primaryFields.add(\"date\", \"Date\", \"Nov 1\");\npass.primaryFields.add({ key: \"time\", label: \"Time\", value: \"10:00AM\");\n```\n\nYou can also call `add` with an array of triplets or array of objects.\n\nTo get one or all fields:\n\n```\nvar dateField = pass.primaryFields.get(\"date\");\nvar allFields = pass.primaryFields.all();\n```\n\nTo remove one or all fields:\n\n```\npass.primaryFields.remove(\"date\");\npass.primaryFields.clear();\n```\n\nAdding images to a pass is the same as adding images to a template:\n\n```\npass.images.icon = iconFilename;\npass.icon(iconFilename);\npass.loadImagesFrom(\"images\");\n```\n\nYou can add the image itself (a `Buffer`), or provide the name of a file or an\nHTTP/S URL for retrieving the image.  You can also provide a function that will\nbe called when it's time to load the image, and should pass an error, or `null`\nand a buffer to its callback. \n\n\n# Generate the file\n\nTo generate a file:\n\n```\nvar file = File.createWriteStream(\"mypass.pkpass\");\npassbook.on(\"error\", function(error) {\n  console.error(error);\n  process.exit(1);\n})\npassbook.pipe(output);\n```\n\nYour pass will emit the `error` event if it fails to generate a valid Passbook\nfile, and emit the `end` event when it successfuly completed generating the\nfile.\n\nYou can pipe to any writeable stream.  When working with HTTP, the `render`\nmethod will set the content type, pipe to the HTTP response, and make use of a\ncallback (if supplied).\n\n```\nserver.get(\"/mypass\", function(request, response) {\n  passbook.render(response, function(error) {\n    if (error)\n      console.error(error);\n  });\n});\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "passbook@2.0.2",
  "_from": "passbook@~2.0.2"
}
